{
    "tasks": [
        {
            "type": "cppbuild", // Definiert den Typ der Aufgabe als C++ Build.
            "label": "C/C++: g++.exe build active file", // Ein benutzerfreundlicher Name für die Aufgabe, der in VS Code angezeigt wird.
            "command": "C:\\msys64\\ucrt64\\bin\\g++.exe", // Der Pfad zum g++ Compiler, der zum Kompilieren verwendet wird.
            "args": [ // Eine Liste von Argumenten, die an den Compiler übergeben werden.
                //"Änderung: '${file}' wurde auskommentiert, da beim testen von jeder Datei compiliert werden kann. Allerdings kann durch das entfernen des Kommentars auch test Dateien direkt ausgeführt werden.",
                "main.cpp", // Kompiliert die Datei main.cpp.
                "Player.cpp", // Kompiliert die Datei Player.cpp.
                "Bullet.cpp", // Kompiliert die Datei Bullet.cpp.
                "Enemy.cpp", // Kompiliert die Datei Enemy.cpp.
                "Rooms.cpp", // Kompiliert die Datei Rooms.cpp.
                "Hindernisse.cpp", // Kompiliert die Datei Hindernisse.cpp.
                "-IC:/msys64/ucrt64/include",  // Gibt den Pfad für Header-Dateien an. Der Compiler sucht hier nach Includedateien.
                "-LC:/msys64/ucrt64/lib",     // Gibt den Pfad für Bibliotheksdateien an. Dies ist entscheidend, damit der Linker die benötigten Bibliotheken findet.
                "-o", // Gibt an, dass das nächste Argument der Name der Ausgabedatei sein wird.
                "${fileDirname}\\${fileBasenameNoExtension}.exe", // Der Name der ausführbaren Ausgabedatei. ${fileDirname} ist der Verzeichnispfad der aktuellen Datei und ${fileBasenameNoExtension} ist der Dateiname ohne Erweiterung.
                "-lraylib", // Linkt die raylib-Bibliothek.
                "-lopengl32", // Linkt die opengl32-Bibliothek, oft für Grafikanwendungen benötigt.
                "-lgdi32", // Linkt die gdi32-Bibliothek, für Windows GDI (Graphics Device Interface) Funktionen.
                "-lwinmm", // Linkt die winmm-Bibliothek, für Multimedia-Funktionen unter Windows.
                "-lws2_32", // Linkt die ws2_32-Bibliothek, für Windows Sockets API (Netzwerkkommunikation).
                "-g", // Fügt Debugging-Informationen zur ausführbaren Datei hinzu, nützlich für das Debuggen mit einem Debugger.
                "-Wall" // Aktiviert alle gängigen Warnungen, was eine gute Praxis für die Codequalität ist.
            ],
            "options": {
                "cwd": "${fileDirname}" // Setzt das aktuelle Arbeitsverzeichnis (current working directory) auf das Verzeichnis der aktuellen Datei.
            },
            "problemMatcher": [
                "$gcc" // Verwendet den eingebauten GCC-Problem-Matcher, um Compilerfehler und Warnungen im VS Code zu erkennen und anzuzeigen.
            ],
            "group": {
                "kind": "build", // Ordnet diese Aufgabe der "build"-Gruppe zu.
                "isDefault": true // Macht diese Build-Aufgabe zur Standard-Build-Aufgabe, die mit Strg+Shift+B (oder Cmd+Shift+B auf macOS) ausgeführt werden kann.
            },
            "detail": "Task generated by Debugger." // Eine informative Beschreibung, die angibt, wie die Aufgabe erstellt wurde.
        }
    ],
    "version": "2.0.0" // Die Version des tasks.json Schemas.
}